name: CI/CD to GKE
on:
  push:
    branches: 
      - 'main' 

# env:
#   PROJECT_ID: ${{ secrets.GCP_PROJECT }}
#   REGION: ${{ secrets.GCP_REGION }}         
#   REPO_LOCATION: ${{ secrets.ARTIFACT_LOCATION }} 
#   REPO_NAME: hello-app-repo

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest 
    permissions:
      contents: read
      id-token: write   
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Option A (recommended): Use Workload Identity Federation (OIDC) to exchange GitHub OIDC token for GCP short-lived credentials.
      # This requires setting up a GCP Service Account and a workload identity pool/provider. See README below.
    #   - name: Authenticate to GCP using Workload Identity Federation
    #     uses: google-github-actions/auth@v1
    #     with:
    #       workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }} # e.g., "projects/123/locations/global/workloadIdentityPools/my-pool/providers/github"
        #    service_account: ${{ secrets.GCP_SA_EMAIL }}                         # e.g., my-sa@project.iam.gserviceaccount.com

      - uses: 'google-github-actions/auth@v3'
        with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}' # Replace with the name of your GitHub Actions secret

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: "gke-gcloud-auth-plugin"

      # - name: Configure Docker for Artifact Registry
      #   run: |
      #     gcloud auth configure-docker ${REPO_LOCATION}-docker.pkg.dev

      # - name: Build, tag and push Docker image
      #   env:
      #     IMAGE_TAG: ${{ github.sha }}
      #     REPO_URL: "${{ env.REPO_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}"
      #   run: |
      #     IMAGE=${REPO_URL}:${IMAGE_TAG}
      #     echo "Building ${IMAGE}"
      #     docker build -t ${IMAGE} .
      #     docker push ${IMAGE}
      #     echo "IMAGE=${IMAGE}" >> $GITHUB_ENV

      # - name: Get GKE credentials (kubectl)
      #   run: |
      #     # cluster name and zone should be set as repo secrets/outputs from terraform
      #     gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_CLUSTER_ZONE }} --project ${{ env.PROJECT_ID }}

      # - name: Deploy to GKE (kubectl apply & set image)
      #   run: |
      #     kubectl apply -f k8s/namespace.yaml
      #     # replace image in manifest then apply
      #     kubectl -n hello-app apply -f k8s/deployment.yaml
      #     kubectl -n hello-app set image deployment/hello-deployment hello=${{ env.REPO_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}:${{ github.sha }} --record
      #     kubectl -n hello-app apply -f k8s/service.yaml

      # - name: Wait for service external IP
      #   run: |
      #     echo "Waiting for external IP (up to 5 minutes)..."
      #     for i in {1..30}; do
      #       ip=$(kubectl -n hello-app get svc hello-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
      #       if [ -n "$ip" ]; then
      #         echo "EXTERNAL_IP=$ip" >> $GITHUB_ENV
      #         echo "Service external IP: $ip"
      #         break
      #       fi
      #       sleep 10
      #     done
