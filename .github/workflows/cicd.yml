name: CI/CD to GKE

on:
  push:
    branches:
      - main
  workflow_dispatch:  # allows manual trigger from the Actions tab

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: ${{ secrets.GCP_REGION }}
  REPO_LOCATION: ${{ secrets.ARTIFACT_LOCATION }}
  REPO_NAME: hello-app-repo

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to GCP (using Service Account key stored in GitHub Secret)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.4

      - name: Terraform Init
        # working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        # working-directory: ./terraform
        run: terraform plan -out=tfplan

    #   - name: Terraform Apply
    #     # working-directory: ./terraform
    #     run: terraform apply -auto-approve tfplan

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v1  
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: "gke-gcloud-auth-plugin"

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${REPO_LOCATION}-docker.pkg.dev

      - name: Build, tag, and push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
          REPO_URL: "${{ env.REPO_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}"
        run: |
          IMAGE=${REPO_URL}:${IMAGE_TAG}
          echo "Building image: ${IMAGE}"
          docker build -t ${IMAGE} .
          docker push ${IMAGE}
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV

      - name: Get GKE credentials (for kubectl)
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_CLUSTER_ZONE }} \
            --project ${{ env.PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl -n hello-app apply -f k8s/deployment.yaml
          kubectl -n hello-app set image deployment/hello-deployment \
            hello=${{ env.REPO_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}:${{ github.sha }} --record
          kubectl -n hello-app apply -f k8s/service.yaml

      - name: Wait for service external IP
        run: |
          echo "Waiting for external IP (up to 5 minutes)..."
          for i in {1..30}; do
            ip=$(kubectl -n hello-app get svc hello-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            if [ -n "$ip" ]; then
              echo "EXTERNAL_IP=$ip" >> $GITHUB_ENV
              echo "Service external IP: $ip"
              break
            fi
            sleep 10
          done
